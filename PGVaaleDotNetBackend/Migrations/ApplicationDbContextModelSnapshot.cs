// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PGVaaleDotNetBackend.Data;

#nullable disable

namespace PGVaaleDotNetBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("booking_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("BookingId"));

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("end_date");

                    b.Property<long>("PgId")
                        .HasColumnType("bigint")
                        .HasColumnName("pg_id");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("start_date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId");

                    b.HasIndex("PgId");

                    b.HasIndex("UserId");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.ContactUs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("contactUs", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FeedbackText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("feedback");

                    b.Property<long>("MaidId")
                        .HasColumnType("bigint")
                        .HasColumnName("maid_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MaidId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Feedback_Tiffin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("feedback");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<long>("TiffinId")
                        .HasColumnType("bigint")
                        .HasColumnName("tiffin_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TiffinId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback_tiffin", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Feedback_Web", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("feedback");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.ToTable("feedback_web", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Maid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aadhaar")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("aadhaar");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("approved");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<double>("MonthlySalary")
                        .HasColumnType("double")
                        .HasColumnName("monthly_salary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("services");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("timing");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("maids", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Breakfast")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("breakfast");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("day_of_week");

                    b.Property<string>("Dinner")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dinner");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FoodCategory")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("food_category");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Lunch")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("lunch");

                    b.Property<DateTime>("MenuDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("menu_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<long>("TiffinId")
                        .HasColumnType("bigint")
                        .HasColumnName("tiffin_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("TiffinId");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aadhaar")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("aadhaar");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.PG", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("amenities");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("availability");

                    b.Property<string>("GeneralPreference")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("general_preference");

                    b.Property<string>("ImagePaths")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_paths");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("NearbyResources")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nearby_resources");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<double>("Rent")
                        .HasColumnType("double")
                        .HasColumnName("rent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("pgs", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.PgDetails", b =>
                {
                    b.Property<long>("PgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("pg_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PgId"));

                    b.Property<string>("PgAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pg_address");

                    b.Property<string>("PgName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pg_name");

                    b.Property<double>("PgRent")
                        .HasColumnType("double")
                        .HasColumnName("pg_rent");

                    b.HasKey("PgId");

                    b.ToTable("pg_details", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.ServiceProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("approved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("service_providers", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Tiffin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aadhaar")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("aadhaar");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("approved");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FoodCategory")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("food_category");

                    b.Property<string>("MaidAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("maid_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("tiffins", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aadhaar")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("aadhaar");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.UserMaid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcceptedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("accepted_date_time");

                    b.Property<DateTime?>("AssignedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_date_time");

                    b.Property<DateTime?>("DeletionDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletion_date_time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<long>("MaidId")
                        .HasColumnType("bigint")
                        .HasColumnName("maid_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("time_slot");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_address");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MaidId");

                    b.HasIndex("UserId");

                    b.ToTable("user_maid", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.UserTiffin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AssignedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_date_time");

                    b.Property<DateTime?>("DeletionDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deletion_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long>("TiffinId")
                        .HasColumnType("bigint")
                        .HasColumnName("tiffin_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("TiffinId");

                    b.HasIndex("UserId");

                    b.ToTable("user_tiffins", (string)null);
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Booking", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.PgDetails", "Pg")
                        .WithMany()
                        .HasForeignKey("PgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pg");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.ChatMessage", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Feedback", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.Maid", "Maid")
                        .WithMany()
                        .HasForeignKey("MaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Feedback_Tiffin", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.Tiffin", "Tiffin")
                        .WithMany()
                        .HasForeignKey("TiffinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tiffin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.Menu", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.Tiffin", "Tiffin")
                        .WithMany()
                        .HasForeignKey("TiffinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tiffin");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.PG", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.UserMaid", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.Maid", "Maid")
                        .WithMany()
                        .HasForeignKey("MaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PGVaaleDotNetBackend.Entities.UserTiffin", b =>
                {
                    b.HasOne("PGVaaleDotNetBackend.Entities.Tiffin", "Tiffin")
                        .WithMany()
                        .HasForeignKey("TiffinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGVaaleDotNetBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tiffin");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
